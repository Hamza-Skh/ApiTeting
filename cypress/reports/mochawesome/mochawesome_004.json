{
  "stats": {
    "suites": 1,
    "tests": 6,
    "passes": 6,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-14T12:21:08.059Z",
    "end": "2023-07-14T12:21:10.279Z",
    "duration": 2220,
    "testsRegistered": 6,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "0e61bb67-7463-45f2-93bd-6272325b8c24",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/usersEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/usersEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "92a8e006-03f7-4761-8ce5-52b38001eba5",
          "title": "users endpoint API testing ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all the user",
              "fullTitle": "users endpoint API testing  get all the user",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const GetAllUser = _userApi.default.getAllUser();\nGetAllUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body).have.length(10);\n});",
              "err": {},
              "uuid": "884d07b4-94b2-4a8d-a253-4753111d87b2",
              "parentUUID": "92a8e006-03f7-4761-8ce5-52b38001eba5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create new user",
              "fullTitle": "users endpoint API testing  create new user",
              "timedOut": null,
              "duration": 288,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst createUser = _userApi.default.createNewUser(requestBody);\ncreateUser.then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n});",
              "err": {},
              "uuid": "af2fce3b-fb23-4b65-9a02-39e3aaddfec2",
              "parentUUID": "92a8e006-03f7-4761-8ce5-52b38001eba5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new user cannot be created without email",
              "fullTitle": "users endpoint API testing  verify new user cannot be created without email",
              "timedOut": null,
              "duration": 252,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"status\": \"active\"\n};\nconst createUser = _userApi.default.createNewUser(requestBody);\ncreateUser.then(response => {\n  expect(response.status).to.eq(422);\n  expect(response.body[0].field).eq('email');\n  expect(response.body[0]).to.have.property('message', \"can't be blank\");\n});",
              "err": {},
              "uuid": "a58d8760-7a48-44e0-b2d1-c50d92450b73",
              "parentUUID": "92a8e006-03f7-4761-8ce5-52b38001eba5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new user cannot be created without name",
              "fullTitle": "users endpoint API testing  verify new user cannot be created without name",
              "timedOut": null,
              "duration": 256,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst createUser = _userApi.default.createNewUser(requestBody);\ncreateUser.then(response => {\n  expect(response.status).eq(422);\n  expect(response.body[0].field).eq('name');\n  expect(response.body[0]).to.have.property('message', \"can't be blank\");\n});",
              "err": {},
              "uuid": "93eaa4eb-f771-41c1-9c89-7844f044d90d",
              "parentUUID": "92a8e006-03f7-4761-8ce5-52b38001eba5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update an existing user",
              "fullTitle": "users endpoint API testing  update an existing user",
              "timedOut": null,
              "duration": 561,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody1 = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst createUser = _userApi.default.createNewUser(requestBody1);\ncreateUser.then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n  const userID = response.body.id;\n  const requestBody2 = {\n    \"name\": \"sosos\",\n    \"gender\": \"male\",\n    \"email\": _userApi.default.generateRandomEmail(),\n    \"status\": \"inactive\"\n  };\n  const updateUser = _userApi.default.updateUser(userID, requestBody2);\n  updateUser.then(response => {\n    expect(response.status).eq(200);\n    expect(response.body.name).eq('sosos');\n    expect(response.body.status).eq('inactive');\n  });\n});",
              "err": {},
              "uuid": "d1024fba-d39d-49bf-820a-72e888883a08",
              "parentUUID": "92a8e006-03f7-4761-8ce5-52b38001eba5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing user",
              "fullTitle": "users endpoint API testing  delete an existing user",
              "timedOut": null,
              "duration": 535,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst createUser = _userApi.default.createNewUser(requestBody);\ncreateUser.then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n  const userID = response.body.id;\n  const delUser = _userApi.default.DelUser(userID);\n  delUser.then(response => {\n    expect(response.status).eq(204);\n    expect(response.body).not.to.have.property('status', 'active');\n  });\n});",
              "err": {},
              "uuid": "759c312a-50c2-40e6-b92e-d219f9587c2c",
              "parentUUID": "92a8e006-03f7-4761-8ce5-52b38001eba5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "884d07b4-94b2-4a8d-a253-4753111d87b2",
            "af2fce3b-fb23-4b65-9a02-39e3aaddfec2",
            "a58d8760-7a48-44e0-b2d1-c50d92450b73",
            "93eaa4eb-f771-41c1-9c89-7844f044d90d",
            "d1024fba-d39d-49bf-820a-72e888883a08",
            "759c312a-50c2-40e6-b92e-d219f9587c2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2165,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}