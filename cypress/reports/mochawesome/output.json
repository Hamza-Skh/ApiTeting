{
  "stats": {
    "suites": 5,
    "tests": 41,
    "passes": 41,
    "pending": 0,
    "failures": 0,
    "testsRegistered": 41,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "start": "2023-07-14T06:45:18.361Z",
    "end": "2023-07-14T09:45:13.288Z",
    "duration": 10794927
  },
  "results": [
    {
      "uuid": "126efaf1-7e8b-47e7-a080-60f740c221ab",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d1d5a5dd-c5e9-44b0-a7f6-779678d6dcf2",
          "title": "user get request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all post ",
              "fullTitle": "user get request  get all post ",
              "timedOut": null,
              "duration": 653,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postsUsers = _postsApi.default.getAllPostsUsers();\npostsUsers.then(res => {\n  cy.log(res.body);\n  expect(res.body).to.have.length(10);\n  expect(res.status).eq(200);\n});",
              "err": {},
              "uuid": "824db035-920a-4574-b103-b4184a07921e",
              "parentUUID": "d1d5a5dd-c5e9-44b0-a7f6-779678d6dcf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get post of specific ID",
              "fullTitle": "user get request  get post of specific ID",
              "timedOut": null,
              "duration": 271,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getUser = _postsApi.default.getSinglePost();\ngetUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body.id).eq(51273);\n  expect(res.body.user_id).eq(3630556);\n});",
              "err": {},
              "uuid": "d9cc5bb0-f735-41a2-a385-f20a84220cd1",
              "parentUUID": "d1d5a5dd-c5e9-44b0-a7f6-779678d6dcf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request with an non-existent post ID ",
              "fullTitle": "user get request  get request with an non-existent post ID ",
              "timedOut": null,
              "duration": 287,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidID = _postsApi.default.invalidID();\ninvalidID.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "28dfd3af-a193-43f9-8819-761ea968190b",
              "parentUUID": "d1d5a5dd-c5e9-44b0-a7f6-779678d6dcf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request without Authetication ",
              "fullTitle": "user get request  get request without Authetication ",
              "timedOut": null,
              "duration": 251,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const withoutAuthetication = _postsApi.default.withoutAuthetication();\nwithoutAuthetication.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "fb4bb25e-7109-4883-b49e-3b0480dc3c09",
              "parentUUID": "d1d5a5dd-c5e9-44b0-a7f6-779678d6dcf2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "824db035-920a-4574-b103-b4184a07921e",
            "d9cc5bb0-f735-41a2-a385-f20a84220cd1",
            "28dfd3af-a193-43f9-8819-761ea968190b",
            "fb4bb25e-7109-4883-b49e-3b0480dc3c09"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1462,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "b8b9916c-3480-4ec3-aac7-7d9a66809b21",
          "title": "user post request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create new post ",
              "fullTitle": "user post request  create new post ",
              "timedOut": null,
              "duration": 540,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(requestBody);\nnew_User.then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypressApi');\n  expect(response.body).to.have.property('status', 'active');\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    cy.log(res.body);\n    expect(res.status).eq(201);\n    expect(res.body.title).eq('Testing');\n    expect(res.body.body).eq('This is my post content');\n    expect(res.body.user_id).eq(User_ID);\n  });\n});",
              "err": {},
              "uuid": "0959da69-1caa-4641-be86-c8b32c00f868",
              "parentUUID": "b8b9916c-3480-4ec3-aac7-7d9a66809b21",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new post request present in all post",
              "fullTitle": "user post request  verify new post request present in all post",
              "timedOut": null,
              "duration": 778,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(requestBody);\nnew_User.then(response => {\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    const postId = res.body.id;\n    const post = _postsApi.default.getNewePost(postId);\n    post.then(res => {\n      expect(res.status).eq(200);\n      expect(res.body.title).eq('Testing');\n      expect(res.body.body).eq('This is my post content');\n    });\n  });\n});",
              "err": {},
              "uuid": "20a8f622-8d58-4655-98ba-e22c0afaae45",
              "parentUUID": "b8b9916c-3480-4ec3-aac7-7d9a66809b21",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "0959da69-1caa-4641-be86-c8b32c00f868",
            "20a8f622-8d58-4655-98ba-e22c0afaae45"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "72400941-0127-4226-8831-4a56eb0151cc",
          "title": "posts put request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user update post sucessfully ",
              "fullTitle": "posts put request  Verify user update post sucessfully ",
              "timedOut": null,
              "duration": 515,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const postBody1 = {\n    title: 'Testing123',\n    body: \"This is put content\",\n    user_id: 3630556\n  };\n  const updatePost = _postsApi.default.updatePost(postID, postBody1);\n  updatePost.then(res => {\n    cy.log(res);\n  });\n});",
              "err": {},
              "uuid": "f0ca84b5-37fb-4b4d-84c2-5b6e1dfd9333",
              "parentUUID": "72400941-0127-4226-8831-4a56eb0151cc",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that a PUT request without providing the title field return an error ",
              "fullTitle": "posts put request  Verify that a PUT request without providing the title field return an error ",
              "timedOut": null,
              "duration": 330,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  //title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(422);\n  expect(res.body[0]).to.have.property(\"field\", \"title\");\n  expect(res.body[0]).to.have.property(\"message\", \"can't be blank\");\n});",
              "err": {},
              "uuid": "1205aebf-79c8-4c2f-9a7c-ab9eebd89bc6",
              "parentUUID": "72400941-0127-4226-8831-4a56eb0151cc",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f0ca84b5-37fb-4b4d-84c2-5b6e1dfd9333",
            "1205aebf-79c8-4c2f-9a7c-ab9eebd89bc6"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 845,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "838fb1ce-310a-4a3d-b43a-cb75ade04acf",
          "title": "post delete request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete an existing post by Id ",
              "fullTitle": "post delete request  delete an existing post by Id ",
              "timedOut": null,
              "duration": 684,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.deletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(204);\n    expect(res.body).to.be.empty;\n    expect(res.body).eq(\"\");\n  });\n});",
              "err": {},
              "uuid": "bbf9e092-e9a0-4dff-9925-65cf256a9f6c",
              "parentUUID": "838fb1ce-310a-4a3d-b43a-cb75ade04acf",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing post by invalid id ",
              "fullTitle": "post delete request  delete an existing post by invalid id ",
              "timedOut": null,
              "duration": 616,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.invalidIdDeletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property(\"message\", \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "0b35252b-b88d-40a1-afe2-ad9f9d17d765",
              "parentUUID": "838fb1ce-310a-4a3d-b43a-cb75ade04acf",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "bbf9e092-e9a0-4dff-9925-65cf256a9f6c",
            "0b35252b-b88d-40a1-afe2-ad9f9d17d765"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1300,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "a7eaa195-5731-4bda-9a70-c3cc962cf4e8",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/usersEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/usersEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "c04c2338-0497-4177-97f8-d699b2e58235",
          "title": "users API Testing ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all the user",
              "fullTitle": "users API Testing  get all the user",
              "timedOut": null,
              "duration": 303,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const GetAllUser = _userApi.default.getAllUser();\nGetAllUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body).have.length(10);\n});",
              "err": {},
              "uuid": "1e4f37fe-439b-456a-b6a4-ef8697ac4d0c",
              "parentUUID": "c04c2338-0497-4177-97f8-d699b2e58235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create new user",
              "fullTitle": "users API Testing  create new user",
              "timedOut": null,
              "duration": 333,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n});",
              "err": {},
              "uuid": "8c2b9ad1-7433-42e7-b7eb-ba9abe0d0862",
              "parentUUID": "c04c2338-0497-4177-97f8-d699b2e58235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new user cannot be created without email",
              "fullTitle": "users API Testing  verify new user cannot be created without email",
              "timedOut": null,
              "duration": 292,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).to.eq(422);\n  expect(response.body[0].field).eq('email');\n  expect(response.body[0]).to.have.property('message', \"can't be blank\");\n});",
              "err": {},
              "uuid": "f228815a-4388-4a67-95cf-cbd87d0c782b",
              "parentUUID": "c04c2338-0497-4177-97f8-d699b2e58235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new user cannot be created without name",
              "fullTitle": "users API Testing  verify new user cannot be created without name",
              "timedOut": null,
              "duration": 302,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).eq(422);\n  expect(response.body[0].field).eq('name');\n  expect(response.body[0]).to.have.property('message', \"can't be blank\");\n});",
              "err": {},
              "uuid": "27148285-b406-4e34-af7c-ad2e3bd25125",
              "parentUUID": "c04c2338-0497-4177-97f8-d699b2e58235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update user",
              "fullTitle": "users API Testing  update user",
              "timedOut": null,
              "duration": 532,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody1 = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody1).then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n  const userID = response.body.id;\n  const requestBody2 = {\n    \"name\": \"sosos\",\n    \"gender\": \"male\",\n    \"email\": _userApi.default.generateRandomEmail(),\n    \"status\": \"inactive\"\n  };\n  _userApi.default.updateUser(userID, requestBody2).then(response => {\n    expect(response.status).eq(200);\n    expect(response.body.name).eq('sosos');\n    expect(response.body.status).eq('inactive');\n  });\n});",
              "err": {},
              "uuid": "6f4d68ba-3c2a-4660-9c3a-e9a9763100c9",
              "parentUUID": "c04c2338-0497-4177-97f8-d699b2e58235",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user",
              "fullTitle": "users API Testing  delete user",
              "timedOut": null,
              "duration": 483,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n  const userID = response.body.id;\n  _userApi.default.DelUser(userID).then(response => {\n    expect(response.status).eq(204);\n    expect(response.body).not.to.have.property('status', 'active');\n  });\n});",
              "err": {},
              "uuid": "3ebf3d7e-fb21-4e17-90a3-91ea52a2aec0",
              "parentUUID": "c04c2338-0497-4177-97f8-d699b2e58235",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1e4f37fe-439b-456a-b6a4-ef8697ac4d0c",
            "8c2b9ad1-7433-42e7-b7eb-ba9abe0d0862",
            "f228815a-4388-4a67-95cf-cbd87d0c782b",
            "27148285-b406-4e34-af7c-ad2e3bd25125",
            "6f4d68ba-3c2a-4660-9c3a-e9a9763100c9",
            "3ebf3d7e-fb21-4e17-90a3-91ea52a2aec0"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2245,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "ae1a4e34-43a3-4f45-bc83-d4f903b33ac5",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/commentsEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/commentsEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "058cd4d2-5631-468f-a2ff-a0a96e9aa0f2",
          "title": "comments get request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all comments ",
              "fullTitle": "comments get request  get all comments ",
              "timedOut": null,
              "duration": 796,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postsUsers = _commentsApi.default.getAllComments();\npostsUsers.then(res => {\n  cy.log(res.body);\n  expect(res.body).to.have.length(10);\n  expect(res.status).eq(200);\n});",
              "err": {},
              "uuid": "f26138f2-6247-4054-9bcd-02ec50baa2ca",
              "parentUUID": "058cd4d2-5631-468f-a2ff-a0a96e9aa0f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get post of specific ID",
              "fullTitle": "comments get request  get post of specific ID",
              "timedOut": null,
              "duration": 302,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getUser = _commentsApi.default.getSingleComment();\ngetUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body.id).eq(45465);\n  expect(res.body.post_id).eq(51253);\n});",
              "err": {},
              "uuid": "d007a1c0-d27b-4a89-b81f-08d8b041cae0",
              "parentUUID": "058cd4d2-5631-468f-a2ff-a0a96e9aa0f2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request with an non-existent comment ID ",
              "fullTitle": "comments get request  get request with an non-existent comment ID ",
              "timedOut": null,
              "duration": 574,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidID = _commentsApi.default.invalidID();\ninvalidID.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "71f8b8eb-1346-4287-b6b1-beeba61d17d3",
              "parentUUID": "058cd4d2-5631-468f-a2ff-a0a96e9aa0f2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f26138f2-6247-4054-9bcd-02ec50baa2ca",
            "d007a1c0-d27b-4a89-b81f-08d8b041cae0",
            "71f8b8eb-1346-4287-b6b1-beeba61d17d3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1672,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "86f3befe-6e37-4e43-aaf0-2650e018ce37",
          "title": "comments post requests ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create new comment ",
              "fullTitle": "comments post requests  create new comment ",
              "timedOut": null,
              "duration": 336,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"Id\": 45465,\n  \"post_id\": 51106,\n  \"name\": \"Aaditya Bhat\",\n  \"email\": \"aaditya_bhat@howell-larson.test\",\n  \"body\": \"this is the comments body\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(201);\n  expect(res.body.body).eq('this is the comments body');\n  expect(res.body.post_id).eq(51106);\n});",
              "err": {},
              "uuid": "6029a809-d55f-44af-a6f4-bf2969d5d6e9",
              "parentUUID": "86f3befe-6e37-4e43-aaf0-2650e018ce37",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new post comment request present in all comments",
              "fullTitle": "comments post requests  verify new post comment request present in all comments",
              "timedOut": null,
              "duration": 551,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"Id\": 45465,\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const post = _commentsApi.default.getNewComment(Id);\n  post.then(res => {\n    expect(res.status).eq(200);\n    expect(res.body.body).eq('this is the comments body 2');\n  });\n});",
              "err": {},
              "uuid": "6dcfcf73-18b3-41cf-9adb-b566f956bd2c",
              "parentUUID": "86f3befe-6e37-4e43-aaf0-2650e018ce37",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6029a809-d55f-44af-a6f4-bf2969d5d6e9",
            "6dcfcf73-18b3-41cf-9adb-b566f956bd2c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 887,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "47ecacb0-38c5-4257-a411-4ecbbe1f71be",
          "title": "comments put request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user update comment sucessfully ",
              "fullTitle": "comments put request  Verify user update comment sucessfully ",
              "timedOut": null,
              "duration": 574,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"Id\": 45465,\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const commentsBody1 = {\n    \"Id\": 45465,\n    \"post_id\": 51106,\n    \"name\": \"cypresstesting\",\n    \"email\": \"testing21@howell-larson.test\",\n    \"body\": \"this is the comments upated request\"\n  };\n  const updateComments = _commentsApi.default.updateComments(Id, commentsBody1);\n  updateComments.then(res => {\n    cy.log(res);\n    expect(res.body.body).eq('this is the comments upated request');\n    expect(res.body.name).eq('cypresstesting');\n    expect(res.body.email).eq('testing21@howell-larson.test');\n  });\n});",
              "err": {},
              "uuid": "db5c1bcf-1b78-475c-bab4-d3db58a85ad1",
              "parentUUID": "47ecacb0-38c5-4257-a411-4ecbbe1f71be",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that a PUT request without providing the name field return an error ",
              "fullTitle": "comments put request  Verify that a PUT request without providing the name field return an error ",
              "timedOut": null,
              "duration": 529,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"Id\": 45465,\n  \"post_id\": 51106,\n  //\"name\":\"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const commentsBody1 = {\n    \"Id\": 45465,\n    \"post_id\": 51106,\n    \"name\": \"cypresstesting\",\n    \"email\": \"testing21@howell-larson.test\",\n    \"body\": \"this is the comments upated request\"\n  };\n  const updateComments = _commentsApi.default.updateComments(Id, commentsBody1);\n  updateComments.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property('message', \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "74b3eb65-04cf-4247-ae06-ae8543cbab6d",
              "parentUUID": "47ecacb0-38c5-4257-a411-4ecbbe1f71be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "db5c1bcf-1b78-475c-bab4-d3db58a85ad1",
            "74b3eb65-04cf-4247-ae06-ae8543cbab6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1103,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5ac17973-a8f2-447d-93ad-349395cf8cf2",
          "title": "comments delete request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete an existing comment by Id ",
              "fullTitle": "comments delete request  delete an existing comment by Id ",
              "timedOut": null,
              "duration": 656,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"Id\": 45465,\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const delComment = _commentsApi.default.deleteComents(Id);\n  delComment.then(res => {\n    cy.log(res);\n    expect(res.status).eq(204);\n    expect(res.body).to.be.empty;\n    expect(res.body).eq(\"\");\n  });\n});",
              "err": {},
              "uuid": "a834188f-ee9a-46d4-b633-6f418cfe14f2",
              "parentUUID": "5ac17973-a8f2-447d-93ad-349395cf8cf2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing post by invalid id ",
              "fullTitle": "comments delete request  delete an existing post by invalid id ",
              "timedOut": null,
              "duration": 572,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"Id\": 45465,\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id + 2;\n  const delComment = _commentsApi.default.deleteComents(Id);\n  delComment.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property('message', \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "f34e0b76-93e8-41fb-ae8b-2730822428b4",
              "parentUUID": "5ac17973-a8f2-447d-93ad-349395cf8cf2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a834188f-ee9a-46d4-b633-6f418cfe14f2",
            "f34e0b76-93e8-41fb-ae8b-2730822428b4"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1228,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "6d21cd39-5e6a-4ae7-abe3-9b74ce5fe70e",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "92a50bac-559f-455e-b7ca-2f48d2615714",
          "title": "user get request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all post ",
              "fullTitle": "user get request  get all post ",
              "timedOut": null,
              "duration": 327,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postsUsers = _postsApi.default.getAllPostsUsers();\npostsUsers.then(res => {\n  cy.log(res.body);\n  expect(res.body).to.have.length(10);\n  expect(res.status).eq(200);\n});",
              "err": {},
              "uuid": "9a9a19a8-a727-46a6-89e2-5bf8151210b6",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get post of specific ID",
              "fullTitle": "user get request  get post of specific ID",
              "timedOut": null,
              "duration": 274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getUser = _postsApi.default.getSinglePost();\ngetUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body.id).eq(51273);\n  expect(res.body.user_id).eq(3630556);\n});",
              "err": {},
              "uuid": "778c0ebb-4290-4a15-93b0-c1f7b3a820b1",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request with an non-existent post ID ",
              "fullTitle": "user get request  get request with an non-existent post ID ",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidID = _postsApi.default.invalidID();\ninvalidID.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "25b30042-fead-47d1-bfcb-a41bd362acd3",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request without Authetication ",
              "fullTitle": "user get request  get request without Authetication ",
              "timedOut": null,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const withoutAuthetication = _postsApi.default.withoutAuthetication();\nwithoutAuthetication.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "261428f7-8104-4dc2-98b4-525da91b3caf",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a9a19a8-a727-46a6-89e2-5bf8151210b6",
            "778c0ebb-4290-4a15-93b0-c1f7b3a820b1",
            "25b30042-fead-47d1-bfcb-a41bd362acd3",
            "261428f7-8104-4dc2-98b4-525da91b3caf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa6120de-34bd-45ad-90ad-9cccf064f743",
          "title": "user post request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create new post ",
              "fullTitle": "user post request  create new post ",
              "timedOut": null,
              "duration": 649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(requestBody);\nnew_User.then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypressApi');\n  expect(response.body).to.have.property('status', 'active');\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    cy.log(res.body);\n    expect(res.status).eq(201);\n    expect(res.body.title).eq('Testing');\n    expect(res.body.body).eq('This is my post content');\n    expect(res.body.user_id).eq(User_ID);\n  });\n});",
              "err": {},
              "uuid": "017bfde2-d494-4602-b334-350c642e0e49",
              "parentUUID": "aa6120de-34bd-45ad-90ad-9cccf064f743",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new post request present in all post",
              "fullTitle": "user post request  verify new post request present in all post",
              "timedOut": null,
              "duration": 790,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(requestBody);\nnew_User.then(response => {\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    const postId = res.body.id;\n    const post = _postsApi.default.getNewePost(postId);\n    post.then(res => {\n      expect(res.status).eq(200);\n      expect(res.body.title).eq('Testing');\n      expect(res.body.body).eq('This is my post content');\n    });\n  });\n});",
              "err": {},
              "uuid": "ff63ccc5-54e7-400e-a843-d3e250168218",
              "parentUUID": "aa6120de-34bd-45ad-90ad-9cccf064f743",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "017bfde2-d494-4602-b334-350c642e0e49",
            "ff63ccc5-54e7-400e-a843-d3e250168218"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1439,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09990644-246f-49e3-8258-2f316bf5d852",
          "title": "posts put request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user update post sucessfully ",
              "fullTitle": "posts put request  Verify user update post sucessfully ",
              "timedOut": null,
              "duration": 568,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const postBody1 = {\n    title: 'Testing123',\n    body: \"This is put content\",\n    user_id: 3630556\n  };\n  const updatePost = _postsApi.default.updatePost(postID, postBody1);\n  updatePost.then(res => {\n    cy.log(res);\n    expect(res.body.title).eq('Testing123');\n    expect(res.body.body).eq('This is put content');\n  });\n});",
              "err": {},
              "uuid": "1b837e50-316b-4e68-8620-aa260d5165c1",
              "parentUUID": "09990644-246f-49e3-8258-2f316bf5d852",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that a PUT request without providing the title field return an error ",
              "fullTitle": "posts put request  Verify that a PUT request without providing the title field return an error ",
              "timedOut": null,
              "duration": 384,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  //title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(422);\n  expect(res.body[0]).to.have.property(\"field\", \"title\");\n  expect(res.body[0]).to.have.property(\"message\", \"can't be blank\");\n});",
              "err": {},
              "uuid": "6241acdf-1075-4cf3-82f9-782d0fb58f0c",
              "parentUUID": "09990644-246f-49e3-8258-2f316bf5d852",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b837e50-316b-4e68-8620-aa260d5165c1",
            "6241acdf-1075-4cf3-82f9-782d0fb58f0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 952,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "95917721-a033-4b1f-a323-dd912da4e4db",
          "title": "post delete request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete an existing post by Id ",
              "fullTitle": "post delete request  delete an existing post by Id ",
              "timedOut": null,
              "duration": 674,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.deletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(204);\n    expect(res.body).to.be.empty;\n    expect(res.body).eq(\"\");\n  });\n});",
              "err": {},
              "uuid": "50764fd8-8d21-4759-b0da-06bc41404f07",
              "parentUUID": "95917721-a033-4b1f-a323-dd912da4e4db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing post by invalid id ",
              "fullTitle": "post delete request  delete an existing post by invalid id ",
              "timedOut": null,
              "duration": 644,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.invalidIdDeletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property(\"message\", \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "1a8a4228-d97c-4c81-8df9-b80c355f72aa",
              "parentUUID": "95917721-a033-4b1f-a323-dd912da4e4db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50764fd8-8d21-4759-b0da-06bc41404f07",
            "1a8a4228-d97c-4c81-8df9-b80c355f72aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    },
    {
      "uuid": "807d2172-64b5-4cd9-9b66-5a262a47c651",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/usersEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/usersEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
          "title": "users API Testing ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all the user",
              "fullTitle": "users API Testing  get all the user",
              "timedOut": null,
              "duration": 312,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const GetAllUser = _userApi.default.getAllUser();\nGetAllUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body).have.length(10);\n});",
              "err": {},
              "uuid": "e4db29db-241c-4530-b65d-cf05b6b39bb4",
              "parentUUID": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "create new user",
              "fullTitle": "users API Testing  create new user",
              "timedOut": null,
              "duration": 371,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n});",
              "err": {},
              "uuid": "bfd77db5-dbbd-4453-8fcd-69127c3d2b9a",
              "parentUUID": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new user cannot be created without email",
              "fullTitle": "users API Testing  verify new user cannot be created without email",
              "timedOut": null,
              "duration": 317,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).to.eq(422);\n  expect(response.body[0].field).eq('email');\n  expect(response.body[0]).to.have.property('message', \"can't be blank\");\n});",
              "err": {},
              "uuid": "4718b0d0-744d-4303-8465-708f9f690080",
              "parentUUID": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new user cannot be created without name",
              "fullTitle": "users API Testing  verify new user cannot be created without name",
              "timedOut": null,
              "duration": 294,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).eq(422);\n  expect(response.body[0].field).eq('name');\n  expect(response.body[0]).to.have.property('message', \"can't be blank\");\n});",
              "err": {},
              "uuid": "e94cc582-c200-4610-bd24-ec27a4ee44c2",
              "parentUUID": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "update user",
              "fullTitle": "users API Testing  update user",
              "timedOut": null,
              "duration": 816,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody1 = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody1).then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n  const userID = response.body.id;\n  const requestBody2 = {\n    \"name\": \"sosos\",\n    \"gender\": \"male\",\n    \"email\": _userApi.default.generateRandomEmail(),\n    \"status\": \"inactive\"\n  };\n  _userApi.default.updateUser(userID, requestBody2).then(response => {\n    expect(response.status).eq(200);\n    expect(response.body.name).eq('sosos');\n    expect(response.body.status).eq('inactive');\n  });\n});",
              "err": {},
              "uuid": "db838b22-1a49-4ce4-81b7-c647f6f01e7b",
              "parentUUID": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete user",
              "fullTitle": "users API Testing  delete user",
              "timedOut": null,
              "duration": 635,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypress\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\n_userApi.default.createNewUser(requestBody).then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypress');\n  expect(response.body).to.have.property('status', 'active');\n  const userID = response.body.id;\n  _userApi.default.DelUser(userID).then(response => {\n    expect(response.status).eq(204);\n    expect(response.body).not.to.have.property('status', 'active');\n  });\n});",
              "err": {},
              "uuid": "a4a69401-aea9-44cf-bc8d-047d9fcb3ad8",
              "parentUUID": "ed8d6a15-7591-479d-b5ff-4225a85e8994",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e4db29db-241c-4530-b65d-cf05b6b39bb4",
            "bfd77db5-dbbd-4453-8fcd-69127c3d2b9a",
            "4718b0d0-744d-4303-8465-708f9f690080",
            "e94cc582-c200-4610-bd24-ec27a4ee44c2",
            "db838b22-1a49-4ce4-81b7-c647f6f01e7b",
            "a4a69401-aea9-44cf-bc8d-047d9fcb3ad8"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 2745,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}