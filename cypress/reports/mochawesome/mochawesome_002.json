{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-14T12:20:50.536Z",
    "end": "2023-07-14T12:20:54.703Z",
    "duration": 4167,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "49379b39-1f8c-43f7-9fd1-16fe665c7ef9",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "0b9020eb-86e7-488a-8b71-f5195a5c85ac",
          "title": "GET request of posts endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all posts ",
              "fullTitle": "GET request of posts endpoint  get all posts ",
              "timedOut": null,
              "duration": 293,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postsUsers = _postsApi.default.getAllPostsUsers();\npostsUsers.then(res => {\n  cy.log(res.body);\n  expect(res.body).to.have.length(10);\n  expect(res.status).eq(200);\n});",
              "err": {},
              "uuid": "677f121c-c662-41d7-8935-ab0dd6f1318b",
              "parentUUID": "0b9020eb-86e7-488a-8b71-f5195a5c85ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get post of specific ID",
              "fullTitle": "GET request of posts endpoint  get post of specific ID",
              "timedOut": null,
              "duration": 265,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getUser = _postsApi.default.getSinglePost();\ngetUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body.id).eq(51273);\n  expect(res.body.user_id).eq(3630556);\n});",
              "err": {},
              "uuid": "f4e263f2-6790-47da-94c3-25d1baa0e2da",
              "parentUUID": "0b9020eb-86e7-488a-8b71-f5195a5c85ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request with an non-existent post ID ",
              "fullTitle": "GET request of posts endpoint  get request with an non-existent post ID ",
              "timedOut": null,
              "duration": 273,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidID = _postsApi.default.invalidID();\ninvalidID.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "00b22a8a-ad00-4e79-9185-0cdc70ebfadb",
              "parentUUID": "0b9020eb-86e7-488a-8b71-f5195a5c85ac",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request without Authetication ",
              "fullTitle": "GET request of posts endpoint  get request without Authetication ",
              "timedOut": null,
              "duration": 229,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const withoutAuthetication = _postsApi.default.withoutAuthetication();\nwithoutAuthetication.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "66de0e69-f3d7-44fb-bb3f-b946701df790",
              "parentUUID": "0b9020eb-86e7-488a-8b71-f5195a5c85ac",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "677f121c-c662-41d7-8935-ab0dd6f1318b",
            "f4e263f2-6790-47da-94c3-25d1baa0e2da",
            "00b22a8a-ad00-4e79-9185-0cdc70ebfadb",
            "66de0e69-f3d7-44fb-bb3f-b946701df790"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1060,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "8768d950-2c52-4cbf-8098-723f9c980418",
          "title": "POST request of posts endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create new post ",
              "fullTitle": "POST request of posts endpoint  create new post ",
              "timedOut": null,
              "duration": 636,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const newUser = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(newUser);\nnew_User.then(response => {\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    cy.log(res.body);\n    expect(res.status).eq(201);\n    expect(res.body.title).eq('Testing');\n    expect(res.body.body).eq('This is my post content');\n    expect(res.body.user_id).eq(User_ID);\n  });\n});",
              "err": {},
              "uuid": "a6fd338d-92cf-434b-8955-34c26def8a85",
              "parentUUID": "8768d950-2c52-4cbf-8098-723f9c980418",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new post request present in all post",
              "fullTitle": "POST request of posts endpoint  verify new post request present in all post",
              "timedOut": null,
              "duration": 482,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postId = res.body.id;\n  const post = _postsApi.default.getNewePost(postId);\n  post.then(res => {\n    expect(res.status).eq(200);\n    expect(res.body.title).eq('Testing');\n    expect(res.body.body).eq('This is my post content');\n  });\n});",
              "err": {},
              "uuid": "6d2a23ef-7fed-4877-b796-42faea5d002b",
              "parentUUID": "8768d950-2c52-4cbf-8098-723f9c980418",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a6fd338d-92cf-434b-8955-34c26def8a85",
            "6d2a23ef-7fed-4877-b796-42faea5d002b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "442f347d-06d0-4e02-aa4f-c63a18f121aa",
          "title": "PUT request of posts endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user update post sucessfully ",
              "fullTitle": "PUT request of posts endpoint  Verify user update post sucessfully ",
              "timedOut": null,
              "duration": 558,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const postBody1 = {\n    title: 'Testing123',\n    body: \"This is put content\"\n  };\n  const updatePost = _postsApi.default.updatePost(postID, postBody1);\n  updatePost.then(res => {\n    cy.log(res);\n    expect(res.body.title).eq('Testing123');\n    expect(res.body.body).eq('This is put content');\n  });\n});",
              "err": {},
              "uuid": "9c410722-0ab7-430a-bc35-fefd1b663273",
              "parentUUID": "442f347d-06d0-4e02-aa4f-c63a18f121aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that a Post request without providing the title field return an error ",
              "fullTitle": "PUT request of posts endpoint  Verify that a Post request without providing the title field return an error ",
              "timedOut": null,
              "duration": 254,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  //title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(422);\n  expect(res.body[0]).to.have.property(\"field\", \"title\");\n  expect(res.body[0]).to.have.property(\"message\", \"can't be blank\");\n});",
              "err": {},
              "uuid": "423b9218-6aa3-4098-99cd-88d68ea338f5",
              "parentUUID": "442f347d-06d0-4e02-aa4f-c63a18f121aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9c410722-0ab7-430a-bc35-fefd1b663273",
            "423b9218-6aa3-4098-99cd-88d68ea338f5"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 812,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "83066089-2d54-4420-a9c0-fe5d0a93f5e6",
          "title": "DELETE request of posts endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete an existing post by Id ",
              "fullTitle": "DELETE request of posts endpoint  delete an existing post by Id ",
              "timedOut": null,
              "duration": 562,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.deletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(204);\n    expect(res.body).to.be.empty;\n    expect(res.body).eq(\"\");\n  });\n});",
              "err": {},
              "uuid": "5f23272b-bdb3-4a96-92e3-6f84419304f4",
              "parentUUID": "83066089-2d54-4420-a9c0-fe5d0a93f5e6",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing post by invalid id ",
              "fullTitle": "DELETE request of posts endpoint  delete an existing post by invalid id ",
              "timedOut": null,
              "duration": 531,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.invalidIdDeletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property(\"message\", \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "32438cb3-d308-4066-bd23-2de19211fb19",
              "parentUUID": "83066089-2d54-4420-a9c0-fe5d0a93f5e6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "5f23272b-bdb3-4a96-92e3-6f84419304f4",
            "32438cb3-d308-4066-bd23-2de19211fb19"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1093,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}