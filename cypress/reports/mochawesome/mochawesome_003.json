{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-14T09:44:59.964Z",
    "end": "2023-07-14T09:45:04.907Z",
    "duration": 4943,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6d21cd39-5e6a-4ae7-abe3-9b74ce5fe70e",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/postsEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "92a50bac-559f-455e-b7ca-2f48d2615714",
          "title": "user get request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all post ",
              "fullTitle": "user get request  get all post ",
              "timedOut": null,
              "duration": 327,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postsUsers = _postsApi.default.getAllPostsUsers();\npostsUsers.then(res => {\n  cy.log(res.body);\n  expect(res.body).to.have.length(10);\n  expect(res.status).eq(200);\n});",
              "err": {},
              "uuid": "9a9a19a8-a727-46a6-89e2-5bf8151210b6",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get post of specific ID",
              "fullTitle": "user get request  get post of specific ID",
              "timedOut": null,
              "duration": 274,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getUser = _postsApi.default.getSinglePost();\ngetUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body.id).eq(51273);\n  expect(res.body.user_id).eq(3630556);\n});",
              "err": {},
              "uuid": "778c0ebb-4290-4a15-93b0-c1f7b3a820b1",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request with an non-existent post ID ",
              "fullTitle": "user get request  get request with an non-existent post ID ",
              "timedOut": null,
              "duration": 284,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidID = _postsApi.default.invalidID();\ninvalidID.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "25b30042-fead-47d1-bfcb-a41bd362acd3",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get request without Authetication ",
              "fullTitle": "user get request  get request without Authetication ",
              "timedOut": null,
              "duration": 255,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const withoutAuthetication = _postsApi.default.withoutAuthetication();\nwithoutAuthetication.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "261428f7-8104-4dc2-98b4-525da91b3caf",
              "parentUUID": "92a50bac-559f-455e-b7ca-2f48d2615714",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9a9a19a8-a727-46a6-89e2-5bf8151210b6",
            "778c0ebb-4290-4a15-93b0-c1f7b3a820b1",
            "25b30042-fead-47d1-bfcb-a41bd362acd3",
            "261428f7-8104-4dc2-98b4-525da91b3caf"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1140,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "aa6120de-34bd-45ad-90ad-9cccf064f743",
          "title": "user post request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create new post ",
              "fullTitle": "user post request  create new post ",
              "timedOut": null,
              "duration": 649,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(requestBody);\nnew_User.then(response => {\n  expect(response.status).eq(201);\n  expect(response.body.name).eq('cypressApi');\n  expect(response.body).to.have.property('status', 'active');\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    cy.log(res.body);\n    expect(res.status).eq(201);\n    expect(res.body.title).eq('Testing');\n    expect(res.body.body).eq('This is my post content');\n    expect(res.body.user_id).eq(User_ID);\n  });\n});",
              "err": {},
              "uuid": "017bfde2-d494-4602-b334-350c642e0e49",
              "parentUUID": "aa6120de-34bd-45ad-90ad-9cccf064f743",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new post request present in all post",
              "fullTitle": "user post request  verify new post request present in all post",
              "timedOut": null,
              "duration": 790,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const requestBody = {\n  \"name\": \"cypressApi\",\n  \"gender\": \"male\",\n  \"email\": _userApi.default.generateRandomEmail(),\n  \"status\": \"active\"\n};\nconst new_User = _userApi.default.createNewUser(requestBody);\nnew_User.then(response => {\n  const User_ID = response.body.id;\n  const postBody = {\n    title: 'Testing',\n    body: \"This is my post content\",\n    user_id: User_ID\n  };\n  const newPost = _postsApi.default.createNewPost(postBody);\n  newPost.then(res => {\n    const postId = res.body.id;\n    const post = _postsApi.default.getNewePost(postId);\n    post.then(res => {\n      expect(res.status).eq(200);\n      expect(res.body.title).eq('Testing');\n      expect(res.body.body).eq('This is my post content');\n    });\n  });\n});",
              "err": {},
              "uuid": "ff63ccc5-54e7-400e-a843-d3e250168218",
              "parentUUID": "aa6120de-34bd-45ad-90ad-9cccf064f743",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "017bfde2-d494-4602-b334-350c642e0e49",
            "ff63ccc5-54e7-400e-a843-d3e250168218"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1439,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "09990644-246f-49e3-8258-2f316bf5d852",
          "title": "posts put request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify user update post sucessfully ",
              "fullTitle": "posts put request  Verify user update post sucessfully ",
              "timedOut": null,
              "duration": 568,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const postBody1 = {\n    title: 'Testing123',\n    body: \"This is put content\",\n    user_id: 3630556\n  };\n  const updatePost = _postsApi.default.updatePost(postID, postBody1);\n  updatePost.then(res => {\n    cy.log(res);\n    expect(res.body.title).eq('Testing123');\n    expect(res.body.body).eq('This is put content');\n  });\n});",
              "err": {},
              "uuid": "1b837e50-316b-4e68-8620-aa260d5165c1",
              "parentUUID": "09990644-246f-49e3-8258-2f316bf5d852",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that a PUT request without providing the title field return an error ",
              "fullTitle": "posts put request  Verify that a PUT request without providing the title field return an error ",
              "timedOut": null,
              "duration": 384,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  //title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(422);\n  expect(res.body[0]).to.have.property(\"field\", \"title\");\n  expect(res.body[0]).to.have.property(\"message\", \"can't be blank\");\n});",
              "err": {},
              "uuid": "6241acdf-1075-4cf3-82f9-782d0fb58f0c",
              "parentUUID": "09990644-246f-49e3-8258-2f316bf5d852",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b837e50-316b-4e68-8620-aa260d5165c1",
            "6241acdf-1075-4cf3-82f9-782d0fb58f0c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 952,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "95917721-a033-4b1f-a323-dd912da4e4db",
          "title": "post delete request ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete an existing post by Id ",
              "fullTitle": "post delete request  delete an existing post by Id ",
              "timedOut": null,
              "duration": 674,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.deletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(204);\n    expect(res.body).to.be.empty;\n    expect(res.body).eq(\"\");\n  });\n});",
              "err": {},
              "uuid": "50764fd8-8d21-4759-b0da-06bc41404f07",
              "parentUUID": "95917721-a033-4b1f-a323-dd912da4e4db",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing post by invalid id ",
              "fullTitle": "post delete request  delete an existing post by invalid id ",
              "timedOut": null,
              "duration": 644,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBody = {\n  title: 'Testing',\n  body: \"This is my post content\",\n  user_id: 3630556\n};\nconst newPost = _postsApi.default.createNewPost(postBody);\nnewPost.then(res => {\n  const postID = res.body.id;\n  const delPost = _postsApi.default.invalidIdDeletePost(postID);\n  delPost.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property(\"message\", \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "1a8a4228-d97c-4c81-8df9-b80c355f72aa",
              "parentUUID": "95917721-a033-4b1f-a323-dd912da4e4db",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "50764fd8-8d21-4759-b0da-06bc41404f07",
            "1a8a4228-d97c-4c81-8df9-b80c355f72aa"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1318,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}