{
  "stats": {
    "suites": 4,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2023-07-14T12:20:39.407Z",
    "end": "2023-07-14T12:20:44.939Z",
    "duration": 5532,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "f067365d-5917-4077-8af5-8fd40caeded8",
      "title": "",
      "fullFile": "cypress/e2e/apiTesting/commentsEndPoint.cy.js",
      "file": "cypress/e2e/apiTesting/commentsEndPoint.cy.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "b85e70a6-c63b-4058-960e-f02c220214c5",
          "title": "GET request of comments endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "get all comments ",
              "fullTitle": "GET request of comments endpoint  get all comments ",
              "timedOut": null,
              "duration": 827,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postsUsers = _commentsApi.default.getAllComments();\npostsUsers.then(res => {\n  cy.log(res.body);\n  expect(res.body).to.have.length(10);\n  expect(res.status).eq(200);\n});",
              "err": {},
              "uuid": "02f5b606-d210-45db-bc8c-2f11c361b567",
              "parentUUID": "b85e70a6-c63b-4058-960e-f02c220214c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get comment of specific ID",
              "fullTitle": "GET request of comments endpoint  get comment of specific ID",
              "timedOut": null,
              "duration": 300,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getUser = _commentsApi.default.getSingleComment();\ngetUser.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(200);\n  expect(res.body.id).eq(45465);\n  expect(res.body.post_id).eq(51253);\n});",
              "err": {},
              "uuid": "18c6c649-4904-46a5-b8f5-ce59f6138560",
              "parentUUID": "b85e70a6-c63b-4058-960e-f02c220214c5",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "get comment with an non-existent comment ID ",
              "fullTitle": "GET request of comments endpoint  get comment with an non-existent comment ID ",
              "timedOut": null,
              "duration": 291,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const invalidID = _commentsApi.default.invalidID();\ninvalidID.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(404);\n  expect(res.body).to.have.property(\"message\", \"Resource not found\");\n});",
              "err": {},
              "uuid": "bcd45419-530a-48f0-a4d0-e0bb5cad5234",
              "parentUUID": "b85e70a6-c63b-4058-960e-f02c220214c5",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "02f5b606-d210-45db-bc8c-2f11c361b567",
            "18c6c649-4904-46a5-b8f5-ce59f6138560",
            "bcd45419-530a-48f0-a4d0-e0bb5cad5234"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1418,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e9473f31-9f6d-4c92-9a5f-8639c6a7e34b",
          "title": "POST request of comments endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "create new comment ",
              "fullTitle": "POST request of comments endpoint  create new comment ",
              "timedOut": null,
              "duration": 361,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"post_id\": 51106,\n  \"name\": \"Aaditya Bhat\",\n  \"email\": \"aaditya_bhat@howell-larson.test\",\n  \"body\": \"this is the comments body\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(201);\n  expect(res.body.body).eq('this is the comments body');\n  expect(res.body.post_id).eq(51106);\n});",
              "err": {},
              "uuid": "e7744e8d-f31c-4638-8fc1-25d6777e1ef6",
              "parentUUID": "e9473f31-9f6d-4c92-9a5f-8639c6a7e34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "verify new post comment request present in all comments",
              "fullTitle": "POST request of comments endpoint  verify new post comment request present in all comments",
              "timedOut": null,
              "duration": 535,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const post = _commentsApi.default.getNewComment(Id);\n  post.then(res => {\n    expect(res.status).eq(200);\n    expect(res.body.body).eq('this is the comments body 2');\n  });\n});",
              "err": {},
              "uuid": "626c6288-6907-4d7c-bb2e-617b70e5a69d",
              "parentUUID": "e9473f31-9f6d-4c92-9a5f-8639c6a7e34b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "post new comment without post_id throw an error",
              "fullTitle": "POST request of comments endpoint  post new comment without post_id throw an error",
              "timedOut": null,
              "duration": 276,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  //\"post_id\": 51106,\n  \"name\": \"Aaditya Bhat\",\n  \"email\": \"aaditya_bhat@howell-larson.test\",\n  \"body\": \"this is the comments body\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  cy.log(res.body);\n  expect(res.status).eq(422);\n  expect(res.body[1].field).eq(\"post_id\");\n  expect(res.body[0].message).eq(\"must exist\");\n});",
              "err": {},
              "uuid": "61fd8674-f394-4af9-8bef-ef5e1c6a48bc",
              "parentUUID": "e9473f31-9f6d-4c92-9a5f-8639c6a7e34b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e7744e8d-f31c-4638-8fc1-25d6777e1ef6",
            "626c6288-6907-4d7c-bb2e-617b70e5a69d",
            "61fd8674-f394-4af9-8bef-ef5e1c6a48bc"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1172,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "23623647-6b7e-4f70-b540-c71b4068879a",
          "title": "PUT request of comments endpoint ",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Verify that comment update sucessfully ",
              "fullTitle": "PUT request of comments endpoint  Verify that comment update sucessfully ",
              "timedOut": null,
              "duration": 742,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const commentsBody1 = {\n    \"post_id\": 51106,\n    \"name\": \"cypresstesting\",\n    \"email\": \"testing21@test.com\",\n    \"body\": \"this is the comments upated request\"\n  };\n  const updateComments = _commentsApi.default.updateComments(Id, commentsBody1);\n  updateComments.then(res => {\n    cy.log(res);\n    expect(res.body.body).eq('this is the comments upated request');\n    expect(res.body.name).eq('cypresstesting');\n    expect(res.body.email).eq('testing21@test.com');\n  });\n});",
              "err": {},
              "uuid": "7fafa515-243e-4ca0-809d-fa8e029d2cb9",
              "parentUUID": "23623647-6b7e-4f70-b540-c71b4068879a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Verify that a PUT request without providing the id field return an error ",
              "fullTitle": "PUT request of comments endpoint  Verify that a PUT request without providing the id field return an error ",
              "timedOut": null,
              "duration": 681,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const commentsBody1 = {\n    \"name\": \"cypresstesting\",\n    \"email\": \"testing21@howell-larson.test\",\n    \"body\": \"this is the comments upated request\"\n  };\n  const updateComments = _commentsApi.default.updateComments(commentsBody1);\n  updateComments.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property('message', \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "2e8fe893-7aeb-485c-8d62-25c8668a61ca",
              "parentUUID": "23623647-6b7e-4f70-b540-c71b4068879a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "7fafa515-243e-4ca0-809d-fa8e029d2cb9",
            "2e8fe893-7aeb-485c-8d62-25c8668a61ca"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1423,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "2308fda0-cff5-4f2b-bd79-eee7ce501834",
          "title": "Delete request of comments endpoint",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "delete an existing comment by Id ",
              "fullTitle": "Delete request of comments endpoint delete an existing comment by Id ",
              "timedOut": null,
              "duration": 782,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id;\n  const delComment = _commentsApi.default.deleteComents(Id);\n  delComment.then(res => {\n    cy.log(res);\n    expect(res.status).eq(204);\n    expect(res.body).to.be.empty;\n    expect(res.body).eq(\"\");\n  });\n});",
              "err": {},
              "uuid": "ac667db5-22a4-4388-b3cc-c89240beda5d",
              "parentUUID": "2308fda0-cff5-4f2b-bd79-eee7ce501834",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "delete an existing comment by invalid id ",
              "fullTitle": "Delete request of comments endpoint delete an existing comment by invalid id ",
              "timedOut": null,
              "duration": 624,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const commentsBody = {\n  \"post_id\": 51106,\n  \"name\": \"cypress\",\n  \"email\": \"testing@howell-larson.test\",\n  \"body\": \"this is the comments body 2\"\n};\nconst newComment = _commentsApi.default.createNewComment(commentsBody);\nnewComment.then(res => {\n  const Id = res.body.id + 2;\n  const delComment = _commentsApi.default.deleteComents(Id);\n  delComment.then(res => {\n    cy.log(res);\n    expect(res.status).eq(404);\n    expect(res.body).to.have.property('message', \"Resource not found\");\n  });\n});",
              "err": {},
              "uuid": "e611c3fb-eb26-48fc-a40b-e5dcac304e08",
              "parentUUID": "2308fda0-cff5-4f2b-bd79-eee7ce501834",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "ac667db5-22a4-4388-b3cc-c89240beda5d",
            "e611c3fb-eb26-48fc-a40b-e5dcac304e08"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1406,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": false,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports/mochawesome",
        "overwrite": false,
        "html": false,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}